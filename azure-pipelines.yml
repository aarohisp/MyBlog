# trigger:
#   branches:
#     include:
#       - main # Trigger on changes to the main branch

# resources:
#   repositories:
#     - repository: MyBlogRepo
#       type: github
#       name: aarohisp/MyBlog
#       endpoint: GitHub-Connection

# variables:
#   # AKS variables
#   ACR_NAME: "mernblogregistry"
#   RESOURCE_GROUP: "Mern_blog"
#   AKS_CLUSTER: "MernBlog"
#   IMAGE_NAME: "myblog-static-site"
#   TAG: "$(Build.BuildId)"

# pool:
#   vmImage: "ubuntu-latest"

# stages:
#   - stage: Package
#     displayName: "Package Static Files"
#     jobs:
#       - job: PackageFiles
#         displayName: "Package HTML/CSS/JS into a Container Image"
#         pool:
#           name: my-personal-computer
#         steps:
#           - checkout: self
#             fetchDepth: 0 # This clones the full repository history

#           - script: |
#               echo "Checking if repository files are available after checkout..."
#               dir
#               echo "Repository contents should be visible here"
#             displayName: "Verify Repository Checkout"

#           - script: |
#               echo "Starting Dockerfile creation for static site..."
#               echo "FROM nginx:alpine" > Dockerfile
#               echo "COPY index.html /usr/share/nginx/html/" >> Dockerfile
#               echo "COPY style.css /usr/share/nginx/html/" >> Dockerfile
#               echo "COPY script.js /usr/share/nginx/html/" >> Dockerfile
#               echo "Dockerfile created with the following content:"
#               type Dockerfile
#             displayName: "Create Dockerfile for Static Site"

#           - task: AzureCLI@2
#             displayName: "Build and Push to Azure Container Registry"
#             inputs:
#               azureSubscription: "azure-connection"
#               scriptType: "ps"
#               scriptLocation: "inlineScript"
#               inlineScript: |
#                 # Set environment variable directly for ACR
#                 $env:GIT_DISCOVERY_ACROSS_FILESYSTEM = "1"

#                 echo "Logging into Azure Container Registry: $(ACR_NAME)"
#                 az acr login --name $(ACR_NAME)

#                 echo "Navigating to build source directory $(Build.SourcesDirectory)"
#                 cd "$(Build.SourcesDirectory)"

#                 echo "Building and pushing images to ACR..."
#                 az acr build --registry $(ACR_NAME) --image $(IMAGE_NAME):blue-$(TAG) -f "$(Build.SourcesDirectory)\Dockerfile" .
#                 az acr build --registry $(ACR_NAME) --image $(IMAGE_NAME):green-$(TAG) -f "$(Build.SourcesDirectory)\Dockerfile" .

#                 echo "Images built and pushed successfully to ACR."

#   - stage: Deploy
#     dependsOn: Package
#     displayName: "Deploy to AKS"
#     jobs:
#       - job: DeployToAKS
#         displayName: "Deploy Static Site to AKS"
#         pool:
#           name: my-personal-computer # Specify the self-hosted agent pool
#         steps:
#           - task: AzureCLI@2
#             displayName: "Login to AKS Cluster"
#             inputs:
#               azureSubscription: "azure-connection"
#               scriptType: "bash"
#               scriptLocation: "inlineScript"
#               inlineScript: |
#                 echo "Retrieving AKS credentials for cluster: $(AKS_CLUSTER) in resource group: $(RESOURCE_GROUP)"
#                 az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_CLUSTER)
#                 echo "Logged into AKS cluster successfully."

#           - task: KubernetesManifest@0
#             displayName: "Apply Blue Deployment"
#             inputs:
#               action: "apply"
#               namespace: "default"
#               manifests: "manifests/deployment.yaml"
#               containers: |
#                 $(ACR_NAME).azurecr.io/$(IMAGE_NAME):blue-$(TAG)
#             env:
#               DEBUG: "true"

#           - task: KubernetesManifest@0
#             displayName: "Apply Green Deployment"
#             inputs:
#               action: "apply"
#               namespace: "default"
#               manifests: "manifests/deployment.yaml"
#               containers: |
#                 $(ACR_NAME).azurecr.io/$(IMAGE_NAME):green-$(TAG)
#             env:
#               DEBUG: "true"

#           - script: |
#               echo "Deployment completed successfully"
#               echo "Deployed images:"
#               echo "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):blue-$(TAG)"
#               echo "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):green-$(TAG)"
#             displayName: "Deployment Confirmation"
trigger:
  branches:
    include:
      - main # Trigger on changes to the main branch

resources:
  repositories:
    - repository: MyBlogRepo
      type: github
      name: aarohisp/MyBlog # Replace with your repository name
      endpoint: GitHub-Connection # Replace with your GitHub service connection name

variables:
  AKS_CLUSTER: "MernBlog" # Replace with your AKS cluster name
  RESOURCE_GROUP: "Mern_blog" # Replace with your AKS resource group
  ACR_NAME: "mernblogregistry" # Replace with your ACR name
  IMAGE_NAME: "myblog-static-site" # Name for the container image
  DEPLOYMENT_NAME: "myblog-deployment" # Kubernetes deployment name
  TAG: "$(Build.BuildId)" # Unique tag for each build

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Package
    displayName: "Package Static Files"
    jobs:
      - job: PackageFiles
        displayName: "Package HTML/CSS/JS into a Container Image"
        steps:
          - checkout: self

          - task: Bash@3
            displayName: "Create Dockerfile for Static Site"
            inputs:
              targetType: "inline"
              script: |
                echo "FROM nginx:alpine" > Dockerfile
                echo "COPY index.html /usr/share/nginx/html/" >> Dockerfile
                echo "COPY style.css /usr/share/nginx/html/" >> Dockerfile
                echo "COPY script.js /usr/share/nginx/html/" >> Dockerfile

          - task: AzureCLI@2
            displayName: "Build and Push to Azure Container Registry"
            inputs:
              azureSubscription: "azure-connection" # Updated to your service connection
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az acr build --registry $(ACR_NAME) --image $(IMAGE_NAME):blue-$(TAG) .
                az acr build --registry $(ACR_NAME) --image $(IMAGE_NAME):green-$(TAG) .

  - stage: Deploy
    dependsOn: Package
    displayName: "Deploy to AKS"
    jobs:
      - job: DeployToAKS
        displayName: "Deploy Static Site to AKS"
        steps:
          - task: AzureCLI@2
            displayName: "Login to AKS Cluster"
            inputs:
              azureSubscription: "azure-connection" # Updated to your service connection
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_CLUSTER)

          - task: KubernetesManifest@0
            displayName: "Apply Kubernetes Deployment"
            inputs:
              action: "apply"
              namespace: "default"
              manifests: "manifests/deployment.yaml" # Ensure this YAML file defines the deployment
              containers: |
                $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG)

          - script: |
              echo "Deployment completed successfully"
            displayName: "Deployment Confirmation"
